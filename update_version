#!/bin/bash
##~---------------------------------------------------------------------------##
##                     _______  _______  _______  _     _                     ##
##                    |   _   ||       ||       || | _ | |                    ##
##                    |  |_|  ||       ||   _   || || || |                    ##
##                    |       ||       ||  | |  ||       |                    ##
##                    |       ||      _||  |_|  ||       |                    ##
##                    |   _   ||     |_ |       ||   _   |                    ##
##                    |__| |__||_______||_______||__| |__|                    ##
##                             www.amazingcow.com                             ##
##  File      : update_version.sh                                             ##
##  Project   : CoreClock                                                     ##
##  Date      : Dec 01, 2017                                                  ##
##  License   : GPLv3                                                         ##
##  Author    : n2omatt <n2omatt@amazingcow.com>                              ##
##  Copyright : AmazingCow - 2017                                             ##
##                                                                            ##
##  Description :                                                             ##
##    This will update the ProjectName (HEADER_FILE) and the Doxyfile         ##
##    (DOXY_FILE) version strings.                                            ##
##                                                                            ##
##    Very dirty, but does the job.                                           ##
##    We were forgeting to update the version string before each release!!    ##
##---------------------------------------------------------------------------~##

##----------------------------------------------------------------------------##
## CONFIG                                                                     ##
##----------------------------------------------------------------------------##
PROJECT_NAME="$1"
VERSION="$2"
HEADER_FILE="$3"
DOXY_FILE="$4"


##----------------------------------------------------------------------------##
## Vars                                                                       ##
##----------------------------------------------------------------------------##
MAJOR=$(echo $2 | cut -d. -f1);
MINOR=$(echo $2 | cut -d. -f2);
REVISION=$(echo $2 | cut -d. -f3);

echo "PROJECT_NAME: $PROJECT_NAME";
echo "VERSION:      $VERSION";
echo "HEADER_FILE:  $HEADER_FILE";
echo "DOXY_FILE:    $DOXY_FILE";

echo "MAJOR:    $MAJOR";
echo "MINOR:    $MINOR";
echo "REVISION: $REVISION";


##----------------------------------------------------------------------------##
## Sanity                                                                     ##
##----------------------------------------------------------------------------##
##------------------------------------------------------------------------------
## Check if the Major, Minor and Revision vars are actual numbers.
##   Thanks to Charles Duffy in SO.
##     http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash
re='^[0-9]+$' #Check if is number.

if ! [[ $MAJOR =~ $re ]] ; then
   echo "MAJOR Not a number" >&2;
   exit 1
fi

if ! [[ $MINOR =~ $re ]] ; then
   echo "MINOR Not a number" >&2;
   exit 1
fi

if ! [[ $REVISION =~ $re ]] ; then
   echo "REVISION Not a number" >&2;
   exit 1
fi


##----------------------------------------------------------------------------##
## Update HEADER FILE                                                         ##
##----------------------------------------------------------------------------##
##------------------------------------------------------------------------------
## Check if an path for the header was passed and it's valid.
if [ -n "$HEADER_FILE" ] && [ ! -e "$HEADER_FILE" ]; then
    echo "[FATAL] Header file path isn't valid: ($HEADER_FILE).";
    exit 1;
fi;

##------------------------------------------------------------------------------
## Make the strings.
MAJOR_STR="#define COW_${PROJECT_NAME}_VERSION_MAJOR    ";
MINOR_STR="#define COW_${PROJECT_NAME}_VERSION_MINOR    ";
REVISION_STR="#define COW_${PROJECT_NAME}_VERSION_REVISION ";

##------------------------------------------------------------------------------
## Replace them on the header file.
##   Notice that this operation will produce another file with the same name
##   but with the extension .new appended.
##   This will enable us to rollback if anything goes wrong.
cat $HEADER_FILE \
    | sed -e s/"$MAJOR_STR\".*\""/"$MAJOR_STR\"$MAJOR\""/g          \
    | sed -e s/"$MINOR_STR\".*\""/"$MINOR_STR\"$MINOR\""/g          \
    | sed -e s/"$REVISION_STR\".*\""/"$REVISION_STR\"$REVISION\""/g \
    > $HEADER_FILE.new;



##----------------------------------------------------------------------------##
## Update DOXY FILE                                                           ##
##----------------------------------------------------------------------------##
##------------------------------------------------------------------------------
## Check if an path for the doxyfile was passed and it's valid.
if [ -n "$DOXY_FILE" ] && [ ! -e "$DOXY_FILE" ]; then
    echo "[FATAL] doxyfile path isn't valid: ($DOXY_FILE).";
    exit 1;
fi;

##------------------------------------------------------------------------------
## Make the strings.
PROJECT_NUMBER_STR="PROJECT_NUMBER         ="
PROJECT_NUMBER_STR_REPLACE="PROJECT_NUMBER         = v$MAJOR.$MINOR.$REVISION";

##------------------------------------------------------------------------------
## Replace them on the header file.
##   Notice that this operation will produce another file with the same name
##   but with the extension .new appended.
##   This will enable us to rollback if anything goes wrong.
cat $DOXY_FILE \
    | sed -e s/"$PROJECT_NUMBER_STR.*"/"$PROJECT_NUMBER_STR_REPLACE"/g \
    > $DOXY_FILE.new;



##----------------------------------------------------------------------------##
## CHECKING                                                                   ##
##----------------------------------------------------------------------------##
##------------------------------------------------------------------------------
## Show the files to user.
test -n "$HEADER_FILE" && cat $HEADER_FILE.new;

echo "Is this correct?[y/n]";
read CORRECT;

if [ "$CORRECT" = "y" ]; then
    echo "Updating the files..."
    mv $DOXY_FILE.new  $DOXY_FILE;
    mv $HEADER_FILE.new  $HEADER_FILE;
else
  rm $DOXY_FILE.new
  rm $HEADER_FILE.new
fi;

